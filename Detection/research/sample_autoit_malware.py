#!/usr/bin/env python3

"""
Title: AutoIT Malware Analysis Tool
Author: BypassIT Research Team
Date Created: August 7th, 2024
Last Modified: August 7th, 2024
Description:
This script is designed to analyze AutoIT scripts that are suspected of being used for malware purposes. It reads the content of a given AutoIT script file and extracts potential malicious indicators such as suspicious functions or behaviors commonly found in known malware samples written in AutoIT. The tool also provides recommendations on how to mitigate such threats if detected.
Dependencies:
- Python 3.x (ensure it's installed in your environment)
- sys module for command line argument processing
- re and other standard libraries for string pattern matching and analysis
Usage:
1. Ensure you have a Python interpreter capable of running this script.
2. Run the script from the command line by providing the path to the AutoIT script file as an argument. Example: python3 sample_autoit_malware.py /path/to/malicious.au3
3. The script will output any potential malicious indicators found in the provided AutoIT script and provide recommendations on how to handle such threats.
"""

import requests
import os
import argparse
import sys
import pyzipper

# Configuration
API_URL = "https://mb-api.abuse.ch/api/v1/"
TAG = "AutoIT"
DOWNLOAD_DIR = "downloads"
ZIP_PASSWORD = b'infected'
HEADERS = { 'API-KEY': '' }  # Add your API Key if needed

# Ensure download directory exists
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# ASCII art and warning message
WARNING_MESSAGE = r"""

__________                                   .______________ __________                                          .__     
\______   \___.__.___________    ______ _____|   \__    ___/ \______   \ ____   ______ ____ _____ _______   ____ |  |__  
 |    |  _<   |  |\____ \__  \  /  ___//  ___/   | |    |     |       _// __ \ /  ___// __ \\__  \\_  __ \_/ ___\|  |  \ 
 |    |   \\___  ||  |_> > __ \_\___ \ \___ \|   | |    |     |    |   \  ___/ \___ \\  ___/ / __ \|  | \/\  \___|   Y  \
 |______  // ____||   __(____  /____  >____  >___| |____|     |____|_  /\___  >____  >\___  >____  /__|    \___  >___|  /
        \/ \/     |__|       \/     \/     \/                        \/     \/     \/     \/     \/            \/     \/ 

***********************************************************************
* WARNING: This script downloads and extracts live malware samples.   *
* Run only in a controlled environment.                               *
***********************************************************************
"""

print(WARNING_MESSAGE)
ack = input("Type 'acknowledge' to proceed: ").strip().lower()

if ack != 'acknowledge':
    print("User did not acknowledge. Exiting script for safety.")
    sys.exit(1)

# Function to ensure SHA-256 checksum validity
def check_sha256(s):
    if s == "":
        return
    if len(s) != 64:
        raise argparse.ArgumentTypeError("Please use sha256 value instead of '" + s + "'")
    return str(s)

# Argument parser setup
parser = argparse.ArgumentParser(description='Download and manage malware samples from Malware Bazaar by abuse.ch')
parser.add_argument('-n', '--number', help='Number of samples to download', metavar="N", type=int)
parser.add_argument('-u', '--unzip', help='Unzip the downloaded file', required=False, action='store_true')
args = parser.parse_args()

# Prompt for number of samples if not provided
if args.number is None:
    args.number = int(input("Enter the number of samples to download: "))

# Function to get recent samples by tag
def get_recent_samples(tag, limit):
    data = {
        'query': 'get_taginfo',
        'tag': tag,
        'limit': limit
    }
    response = requests.post(API_URL, data=data, timeout=15)
    response.raise_for_status()
    return response.json()

# Function to download a sample
def download_sample(sha256_hash, unzip):
    file_path = os.path.join(DOWNLOAD_DIR, f"{sha256_hash}.zip")
    if os.path.exists(file_path):
        print(f"File {file_path} already exists, skipping.")
        return

    data = {
        'query': 'get_file',
        'sha256_hash': sha256_hash
    }
    try:
        response = requests.post(API_URL, data=data, timeout=15, headers=HEADERS)
        response.raise_for_status()

        if 'file_not_found' in response.text:
            print(f"Error: file not found for SHA-256: {sha256_hash}")
            return

        with open(file_path, 'wb') as file:
            file.write(response.content)
        print(f"Sample \"{sha256_hash}\" downloaded.")

        if unzip:
            try:
                with pyzipper.AESZipFile(file_path) as zf:
                    zf.pwd = ZIP_PASSWORD
                    zf.extractall(DOWNLOAD_DIR)
                print(f"Sample \"{sha256_hash}\" unpacked.")
                os.remove(file_path)
                print(f"Zip file \"{file_path}\" deleted.")
            except (pyzipper.BadZipFile, pyzipper.LargeZipFile, EOFError) as e:
                print(f"Failed to unzip file {file_path}: {e}")

    except requests.RequestException as e:
        print(f"Request failed for SHA-256 {sha256_hash}: {e}")

# Main script logic
try:
    samples_data = get_recent_samples(TAG, args.number)
except requests.RequestException as e:
    print(f"Request failed: {e}")
    sys.exit(1)

if samples_data.get("query_status") == "ok":
    samples = samples_data.get("data", [])
    for sample in samples:
        sha256_hash = sample.get('sha256_hash')
        if sha256_hash:
            print(f"Fetching sample with SHA-256: {sha256_hash}")
            try:
                download_sample(sha256_hash, args.unzip)
            except requests.RequestException as e:
                print(f"Failed to download sample {sha256_hash}: {e}")
else:
    print("No samples found or API request failed.")